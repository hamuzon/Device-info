<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Device-info</title>
  <link id="favicon" rel="icon" type="image/png" href="icon-dark.png" />
  <meta name="theme-color" content="#001b33" media="(prefers-color-scheme: dark)">
  <meta name="theme-color" content="#f0f0f0" media="(prefers-color-scheme: light)">
  <style>
    :root {
      --bg-dark: #001b33;
      --bg-light: #f0f0f0;
      --text-dark: #a3c4f3;
      --text-light: #202020;
      --accent-dark: #4da6ff;
      --accent-light: #1a5fff;
      --font-mono: 'Share Tech Mono', monospace;
      --border-light: #bbb;
      --border-dark: #444;
    }
    body {
      margin: 0;
      font-family: var(--font-mono);
      background-color: var(--bg-dark);
      color: var(--text-dark);
      transition: background 0.3s, color 0.3s;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 0 1rem 2rem;
    }
    body.light {
      background-color: var(--bg-light);
      color: var(--text-light);
    }
    header {
      max-width: 700px;
      width: 100%;
      margin: 1rem auto 1.5rem;
      font-size: 0.9rem;
      line-height: 1.4;
      background: rgba(0, 116, 217, 0.15);
      border-radius: 12px;
      padding: 0.6rem 1rem;
      color: var(--accent-dark);
      user-select: none;
      font-weight: 600;
      text-align: center;
    }
    body.light header {
      background: rgba(26, 95, 255, 0.15);
      color: var(--accent-light);
    }
    h1 {
      margin: 0 0 1rem;
      font-size: 1.8rem;
      text-align: center;
      user-select: none;
    }
    .controls {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
      flex-wrap: wrap;
      justify-content: center;
    }
    .controls button {
      font-family: var(--font-mono);
      padding: 0.5rem 1rem;
      border: 2px solid var(--accent-dark);
      background: transparent;
      color: var(--text-dark);
      cursor: pointer;
      border-radius: 8px;
      transition: 0.3s;
      user-select: none;
    }
    body.light .controls button {
      border-color: var(--accent-light);
      color: var(--text-light);
    }
    .controls button.active {
      background: var(--accent-dark);
      color: #fff;
    }
    body.light .controls button.active {
      background: var(--accent-light);
    }
    section {
      max-width: 700px;
      width: 100%;
      margin-bottom: 2rem;
      border-radius: 12px;
      background: rgba(0, 0, 0, 0.1);
      padding: 1rem;
    }
    body.light section {
      background: rgba(255, 255, 255, 0.9);
      box-shadow: 0 0 8px rgba(0,0,0,0.1);
    }
    section h2 {
      margin-top: 0;
      margin-bottom: 0.5rem;
      font-weight: 700;
      user-select: none;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      table-layout: fixed;
      word-wrap: break-word;
    }
    th, td {
      padding: 0.5rem 0.8rem;
      border-bottom: 1px solid var(--border-dark);
      text-align: left;
      word-break: break-word;
      vertical-align: top;
      font-weight: normal;
    }
    body.light th, body.light td {
      border-color: var(--border-light);
    }
    th {
      font-weight: 600;
      width: 40%;
      user-select: none;
      color: var(--accent-dark);
    }
    body.light th {
      color: var(--accent-light);
    }
    tr {
      animation: fadeIn 0.4s ease-in-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    footer {
      font-size: 0.85rem;
      text-align: center;
      margin-top: auto;
      padding-top: 1rem;
      user-select: none;
      color: var(--text-dark);
    }
    body.light footer {
      color: var(--text-light);
    }
    footer a {
      color: inherit;
      text-decoration: underline;
    }
    footer a:hover {
      text-decoration: none;
    }
    @media (max-width: 480px) {
      h1 {
        font-size: 1.5rem;
      }
      .controls button {
        font-size: 0.9rem;
        padding: 0.4rem 0.8rem;
      }
      th, td {
        padding: 0.4rem 0.6rem;
      }
      section {
        padding: 0.8rem;
      }
      header {
        font-size: 0.8rem;
      }
    }
  </style>
</head>
<body>
  <header id="header-info" aria-label="IP and Libraries info"></header>

  <h1 id="title">Device-info</h1>

  <div class="controls" role="group" aria-label="Language and Mode Switch">
    <button id="btn-ja" class="active" aria-pressed="true" type="button">日本語</button>
    <button id="btn-en" aria-pressed="false" type="button">English</button>
    <button id="btn-light" aria-pressed="false" type="button">ライト</button>
    <button id="btn-dark" class="active" aria-pressed="true" type="button">ダーク</button>
  </div>

  <section aria-labelledby="cat-os">
    <h2 id="cat-os">OS情報 / OS Info</h2>
    <table id="table-os" role="table" aria-label="Operating System Information"></table>
  </section>

  <section aria-labelledby="cat-browser">
    <h2 id="cat-browser">ブラウザ情報 / Browser Info</h2>
    <table id="table-browser" role="table" aria-label="Browser Information"></table>
  </section>

  <section aria-labelledby="cat-screen">
    <h2 id="cat-screen">画面情報 / Screen Info</h2>
    <table id="table-screen" role="table" aria-label="Screen Information"></table>
  </section>

  <section aria-labelledby="cat-cpu">
    <h2 id="cat-cpu">CPU・メモリ / CPU & Memory</h2>
    <table id="table-cpu" role="table" aria-label="CPU and Memory Information"></table>
  </section>

  <section aria-labelledby="cat-network">
    <h2 id="cat-network">ネットワーク情報 / Network Info</h2>
    <table id="table-network" role="table" aria-label="Network Information"></table>
  </section>

  <section aria-labelledby="cat-other">
    <h2 id="cat-other">その他情報 / Other Info</h2>
    <table id="table-other" role="table" aria-label="Other Information"></table>
  </section>

  <footer>
    <div id="footer-copyright"></div>
    <div id="footer-warning"></div>
    <div id="footer-library">
      使用ライブラリ: <a href="https://www.ipify.org/" target="_blank" rel="noopener noreferrer">ipify API</a>, JavaScript Web API
    </div>
  </footer>

  <script>
    (function () {
      const dict = {
        ja: {
          title: "デバイス情報",
          category: {
            os: "OS情報",
            browser: "ブラウザ情報",
            screen: "画面情報",
            cpu: "CPU・メモリ",
            network: "ネットワーク情報",
            other: "その他情報"
          },
          os: "OS名",
          version: "バージョン",
          device: "端末名",
          browser: "ブラウザ",
          ua: "ユーザーエージェント",
          screen: "画面解像度",
          viewport: "ビューポート",
          colorDepth: "色深度",
          pixelDepth: "ピクセル深度",
          cpu: "CPUコア数",
          memory: "メモリ",
          ipv4: "IPv4アドレス",
          ipv6: "IPv6アドレス",
          ip: "現在使用IP",
          online: "オンライン状態",
          language: "ブラウザ言語",
          cookiesEnabled: "クッキー有効",
          fetchedAt: "取得時刻",
          now: "現在時刻",
          timezone: "タイムゾーン",
          unknown: "不明",
          online_yes: "オンライン",
          online_no: "オフライン",
          footer: {
            copyright: "© 2025 device-info.hamusata.f5.si",
            warning: "表示される情報は一部、正確でない可能性があります。",
            library: "使用ライブラリ: ipify API, JavaScript Web API"
          }
        },
        en: {
          title: "Device Info",
          category: {
            os: "OS Info",
            browser: "Browser Info",
            screen: "Screen Info",
            cpu: "CPU & Memory",
            network: "Network Info",
            other: "Other Info"
          },
          os: "OS",
          version: "Version",
          device: "Device",
          browser: "Browser",
          ua: "User Agent",
          screen: "Screen",
          viewport: "Viewport",
          colorDepth: "Color Depth",
          pixelDepth: "Pixel Depth",
          cpu: "CPU Cores",
          memory: "Memory",
          ipv4: "IPv4",
          ipv6: "IPv6",
          ip: "Current IP",
          online: "Online",
          language: "Browser Language",
          cookiesEnabled: "Cookies Enabled",
          fetchedAt: "Fetched At",
          now: "Now",
          timezone: "Timezone",
          unknown: "Unknown",
          online_yes: "Online",
          online_no: "Offline",
          footer: {
            copyright: "© 2025 device-info.hamusata.f5.si",
            warning: "Displayed information might be partly inaccurate.",
            library: "Libraries used: ipify API, JavaScript Web API"
          }
        }
      };

      let currentLang = localStorage.getItem("lang") || "ja";
      let darkMode = localStorage.getItem("mode") === "dark" || (localStorage.getItem("mode") === null && window.matchMedia('(prefers-color-scheme: dark)').matches);

      const titleEl = document.getElementById('title');
      const headerEl = document.getElementById('header-info');
      const btnJa = document.getElementById('btn-ja');
      const btnEn = document.getElementById('btn-en');
      const btnLight = document.getElementById('btn-light');
      const btnDark = document.getElementById('btn-dark');
      const favicon = document.getElementById('favicon');

      const footerCopyright = document.getElementById('footer-copyright');
      const footerWarning = document.getElementById('footer-warning');
      const footerLibrary = document.getElementById('footer-library');

      const tables = {
        os: document.getElementById('table-os'),
        browser: document.getElementById('table-browser'),
        screen: document.getElementById('table-screen'),
        cpu: document.getElementById('table-cpu'),
        network: document.getElementById('table-network'),
        other: document.getElementById('table-other')
      };

      function detectOS() {
        const ua = navigator.userAgent;
        if (/Android/.test(ua)) {
          const version = (ua.match(/Android\s+([\d.]+)/) || [])[1] || dict[currentLang].unknown;
          const model = (ua.match(/;\s?([^;\/]+)\s+Build/i) || [])[1] || dict[currentLang].unknown;
          return { name: "Android", version, device: model };
        }
        if (/iPhone|iPad|iPod/.test(ua)) {
          const version = (ua.match(/OS (\d+)[_.](\d+)/) || [])[1] || dict[currentLang].unknown;
          const model = /iPhone/.test(ua) ? "iPhone" : "iPad";
          return { name: model === "iPhone" ? "iOS" : "iPadOS", version, device: model };
        }
        if (/Windows NT/.test(ua)) {
          const ver = (ua.match(/Windows NT ([\d.]+)/) || [])[1];
          const map = {
            "10.0": "10 / 11",
            "6.3": "8.1",
            "6.2": "8",
            "6.1": "7",
            "6.0": "Vista",
            "5.1": "XP"
          };
          return { name: "Windows", version: map[ver] || ver || dict[currentLang].unknown, device: "PC" };
        }
        if (/Mac OS X/.test(ua)) {
          const version = (ua.match(/Mac OS X (\d+[_\.]\d+)/) || [])[1]?.replace(/_/g, ".") || dict[currentLang].unknown;
          return { name: "macOS", version, device: "Mac" };
        }
        if (/Linux/.test(navigator.platform)) {
          return { name: dict[currentLang].unknown, version: dict[currentLang].unknown, device: "Linux端末" };
        }
        return { name: dict[currentLang].unknown, version: dict[currentLang].unknown, device: dict[currentLang].unknown };
      }

      function getBrowser() {
        const ua = navigator.userAgent;
        if (/Edg\//.test(ua)) return "Microsoft Edge";
        if (/OPR\//.test(ua)) return "Opera";
        if (/Chrome\//.test(ua)) return "Chrome";
        if (/Firefox\//.test(ua)) return "Firefox";
        if (/Safari/.test(ua) && !/Chrome/.test(ua)) return "Safari";
        return dict[currentLang].unknown;
      }

      function createRow(label, value) {
        const row = document.createElement('tr');
        row.innerHTML = `<th scope="row">${label}</th><td>${value}</td>`;
        return row;
      }

      async function fetchIPData() {
        const ipv4 = await fetch('https://api.ipify.org?format=json')
          .then(res => res.json())
          .then(data => data.ip || dict[currentLang].unknown)
          .catch(() => dict[currentLang].unknown);

        const ipv6 = await fetch('https://api64.ipify.org?format=json')
          .then(res => res.json())
          .then(data => data.ip || dict[currentLang].unknown)
          .catch(() => dict[currentLang].unknown);

        const currentIP = ipv6 && ipv6 !== dict[currentLang].unknown ? ipv6 : ipv4;

        return { ipv4, ipv6, currentIP };
      }

      async function updateInfo() {
        const lang = dict[currentLang];

        // クリア
        Object.values(tables).forEach(tbl => tbl.innerHTML = '');

        const ua = navigator.userAgent;
        const osInfo = detectOS();
        const browser = getBrowser();
        const { ipv4, ipv6, currentIP } = await fetchIPData();
        const cpuCores = navigator.hardwareConcurrency || lang.unknown;
        const rawMemory = navigator.deviceMemory;
        const memory = typeof rawMemory === 'number' && rawMemory > 0
          ? `${rawMemory % 1 === 0 ? rawMemory : rawMemory.toFixed(1)} GB`
          : lang.unknown;

        const screenRes = `${screen.width} x ${screen.height}`;
        const viewport = `${window.innerWidth} x ${window.innerHeight}`;
        const colorDepth = screen.colorDepth;
        const pixelDepth = screen.pixelDepth;

        const language = navigator.language || lang.unknown;
        const cookiesEnabled = navigator.cookieEnabled ? lang.online_yes : lang.online_no;

        const fetchedAt = new Date();
        const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone || lang.unknown;
        const onlineStatus = navigator.onLine ? lang.online_yes : lang.online_no;

        // OSテーブル
        [
          [lang.os, osInfo.name],
          [lang.version, osInfo.version],
          [lang.device, osInfo.device]
        ].forEach(([l,v]) => tables.os.appendChild(createRow(l,v)));

        // ブラウザテーブル
        [
          [lang.browser, browser],
          [lang.ua, ua]
        ].forEach(([l,v]) => tables.browser.appendChild(createRow(l,v)));

        // 画面テーブル
        [
          [lang.screen, screenRes],
          [lang.viewport, viewport],
          [lang.colorDepth, colorDepth],
          [lang.pixelDepth, pixelDepth]
        ].forEach(([l,v]) => tables.screen.appendChild(createRow(l,v)));

        // CPU・メモリテーブル
        [
          [lang.cpu, cpuCores],
          [lang.memory, memory]
        ].forEach(([l,v]) => tables.cpu.appendChild(createRow(l,v)));

        // ネットワークテーブル
        [
          [lang.ipv4, ipv4],
          [lang.ipv6, ipv6],
          [lang.ip, currentIP],
          [lang.online, onlineStatus],
          [lang.language, language],
          [lang.cookiesEnabled, cookiesEnabled],
          [lang.fetchedAt, fetchedAt.toLocaleString(currentLang)],
          [lang.timezone, timezone]
        ].forEach(([l,v]) => tables.network.appendChild(createRow(l,v)));

        // その他テーブル
        [
          ["User Agent Length", ua.length],
          ["Platform", navigator.platform || lang.unknown],
          ["Vendor", navigator.vendor || lang.unknown],
          ["Online Event Supported", "ononline" in window ? "Yes" : "No"],
          ["Offline Event Supported", "onoffline" in window ? "Yes" : "No"]
        ].forEach(([l,v]) => tables.other.appendChild(createRow(l,v)));

        // ヘッダーIPとライブラリ情報
        headerEl.textContent = `${lang.ip}: ${currentIP} | Libraries: ipify API, JavaScript Web API`;

        // タイトル
        titleEl.textContent = lang.title;

        // フッター警告
        footerWarning.textContent = lang.footer.warning;

        // フッターライブラリは固定

        // フッター著作権表示
        const hostname = location.hostname;
        let footerCopyrightText = '© 2025 ';
        if(hostname.endsWith('github.io')){
          footerCopyrightText +=
            '<a href="https://hamuzon.github.io" target="_blank" rel="noopener noreferrer">@hamuzon</a> (hamuzon.github.io)';
        } else if(hostname.endsWith('hamusata.f5.si')){
          footerCopyrightText +=
            '<a href="https://home.hamusata.f5.si" target="_blank" rel="noopener noreferrer">@hamusata</a> (home.hamusata.f5.si)';
        } else {
          footerCopyrightText += 'device-info';
        }
        footerCopyright.innerHTML = footerCopyrightText;

        // 言語ボタン状態更新
        btnJa.classList.toggle('active', currentLang === 'ja');
        btnEn.classList.toggle('active', currentLang === 'en');
        btnJa.setAttribute('aria-pressed', currentLang === 'ja');
        btnEn.setAttribute('aria-pressed', currentLang === 'en');

        // モード切替反映
        if(darkMode){
          document.body.classList.remove('light');
          favicon.href = 'icon-dark.png';
          btnDark.classList.add('active');
          btnLight.classList.remove('active');
          btnDark.setAttribute('aria-pressed', 'true');
          btnLight.setAttribute('aria-pressed', 'false');
        } else {
          document.body.classList.add('light');
          favicon.href = 'icon-light.png';
          btnDark.classList.remove('active');
          btnLight.classList.add('active');
          btnDark.setAttribute('aria-pressed', 'false');
          btnLight.setAttribute('aria-pressed', 'true');
        }
      }

      btnJa.addEventListener('click', () => {
        if (currentLang !== 'ja') {
          currentLang = 'ja';
          localStorage.setItem('lang', 'ja');
          updateInfo();
        }
      });
      btnEn.addEventListener('click', () => {
        if (currentLang !== 'en') {
          currentLang = 'en';
          localStorage.setItem('lang', 'en');
          updateInfo();
        }
      });

      btnLight.addEventListener('click', () => {
        if (darkMode) {
          darkMode = false;
          localStorage.setItem('mode', 'light');
          updateInfo();
        }
      });
      btnDark.addEventListener('click', () => {
        if (!darkMode) {
          darkMode = true;
          localStorage.setItem('mode', 'dark');
          updateInfo();
        }
      });

      window.addEventListener('online', updateInfo);
      window.addEventListener('offline', updateInfo);

      // 初期実行
      updateInfo();
    })();
  </script>
</body>
</html>
